{{- $jx := .Values.jxRequirements -}}
{{- $secrets := .Values.secrets -}}
{{- $lighthouseEngine := .Values.lighthouseEngine -}}
{{- range $key, $env := .Values.jxRequirements.environments }}
{{- $gitUrlPathPrefix := "" -}}
{{- if eq "bitbucketserver" $jx.cluster.gitKind }}
{{- $gitUrlPathPrefix := "/scm" -}}
{{- end }}
---
apiVersion: jenkins.io/v1
kind: Environment
metadata:
  labels:
    env: "{{ $env.key }}"
    team: {{ $env.namespace | default "jx" }}
  name: "{{ $env.key }}"
spec:
{{- if hasKey $env "repository" }}
  source:
    ref: "master"
    url: {{ $jx.cluster.gitServer | default "https://github.com" }}{{ $gitUrlPathPrefix }}/{{ $env.owner | default $jx.cluster.environmentGitOwner }}/{{ $env.repository }}.git
{{- end }}

{{- if eq "dev" $env.key }}
  kind: Development
  label: Development
  namespace: {{ $env.namespace | default "jx" }}
  promotionStrategy: "{{ $env.promotionStrategy | default "Never" }}"
  webHookEngine: {{ $jx.webhook | default "lighthouse" | title | quote }}
  teamSettings:
    appsRepository: http://chartmuseum.jenkins-x.io
{{- if and (hasKey $jx "buildPacks") (hasKey $jx.buildPacks "buildPackLibrary") }}
{{- if hasKey $jx.buildPacks.buildPackLibrary "name" }}
    buildPackName: "{{ $jx.buildPacks.buildPackLibrary.name }}"
{{- end }}
{{- if hasKey $jx.buildPacks.buildPackLibrary "gitRef" }}
    buildPackRef: "{{ $jx.buildPacks.buildPackLibrary.gitRef }}"
{{- end }}
{{- if hasKey $jx.buildPacks.buildPackLibrary "gitURL" }}
    buildPackUrl: "{{ $jx.buildPacks.buildPackLibrary.gitURL }}"
{{- end }}
{{- end }}
{{- if and (hasKey $jx "deployOptions") (or ($jx.deployOptions.canary) ($jx.deployOptions.hpa)) }}
    deployOptions:
{{- if $jx.deployOptions.canary }}
      canary: true
{{- end }}
{{- if $jx.deployOptions.hpa }}
      hpa: true
{{- end }}
{{- end }}
    defaultScheduler:
      apiVersion: jenkins.io/v1
      kind: Scheduler
{{- if eq $lighthouseEngine "tekton" }}
      name: jx-meta-pipeline
{{- else }}
      name: default
{{- end -}}
{{- if hasKey $jx.cluster "dockerRegistryOrg" }}
    dockerRegistryOrg: "{{ $jx.cluster.dockerRegistryOrg }}"
{{- else }}
    dockerRegistryOrg: "{{ $jx.cluster.project }}"
{{- end }}
    envOrganisation: {{ $jx.cluster.environmentGitOwner }}
    gitServer: https://github.com
{{- if $jx.cluster.gitPublic }}
    gitPublic: true
{{- end }}
    helmTemplate: true
    kubeProvider: "{{ $jx.cluster.provider }}"
    pipelineUsername: "{{ $jx.pipelineUser.username | default "jenkins-x-labs-bot" }}"
    pipelineUserEmail: "{{ $jx.pipelineUser.email | default "jenkins-x@googlegroups.com" }}"
    prowConfig: Scheduler
{{- if eq $jx.webhook "jenkins" }}
    promotionEngine: Jenkins
    importMode: Jenkinsfile
{{- else }}
    importMode: YAML
    promotionEngine: Prow
    prowEngine: Tekton
{{- end }}
    versionStreamUrl: "{{ $jx.versionStream.url }}"
    versionStreamRef: "{{ $jx.versionStream.ref }}"
    useGitOps: true
{{- if $jx.storage }}
    storageLocations:
{{- range $key, $val := $jx.storage }}
{{- if eq "logs" $val.name }}
    - bucketUrl: {{ $val.url }}
      classifier: logs
{{- end }}
{{- if eq "reports" $val.name }}
    - bucketUrl: {{ $val.url }}
      classifier: reports
{{- end }}
{{- end }}
{{- end }}

{{- if $jx.quickstartLocations }}
    quickstartLocations:
{{ toYaml $jx.quickstartLocations | indent 6 }}
{{- end }}
{{- else if eq "staging" $env.key }}
  kind: Permanent
  label: Staging
  namespace: {{ $env.namespace | default "jx-staging" }}
  promotionStrategy: "{{ $env.promotionStrategy | default "Auto" }}"
  order: 100
  {{- if hasKey $env "requirementsYaml" }}
  teamSettings:
# {{- if hasKey $jx "buildPackName" }}
#     buildPackName: "{{ $jx.buildPackName }}"
# {{- end }}
# {{- if hasKey $jx "buildPackRef" }}
#     buildPackRef: "{{ $jx.buildPackRef }}"
# {{- end }}
# {{- if hasKey $jx "buildPackURL" }}
#     buildPackUrl: "{{ $jx.buildPackURL }}"
# {{- end }}

    bootRequirements: {{ toYaml $env.requirementsYaml | indent 4 }}
{{- end }}
{{- else }}
  kind: Permanent
  label: {{ title $env.key }}
  order: 500
  promotionStrategy: "{{ $env.promotionStrategy | default "Manual" }}"
{{- if hasKey $env "requirementsYaml" }}
  teamSettings:
# {{- if hasKey $jx "buildPackName" }}
#     buildPackName: "{{ $jx.buildPackName }}"
# {{- end }}
# {{- if hasKey $jx "buildPackRef" }}
#     buildPackRef: "{{ $jx.buildPackRef }}"
# {{- end }}
# {{- if hasKey $jx "buildPackURL" }}
#     buildPackUrl: "{{ $jx.buildPackURL }}"
# {{- end }}  
  
    bootRequirements: {{ toYaml $env.requirementsYaml | indent 4 }}
{{- end }}
{{- if $env.namespace }}
  namespace: "{{ $env.namespace }}"
{{- else }}
  namespace: "jx-{{ $env.key }}"
{{- end -}}
{{- end -}}
{{- if $env.remoteCluster }}
  remoteCluster: true
{{- end }}
{{- end -}}
